# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_draft.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import os


def create_table(parent, geometry, header_labels, num_rows, show_vertical_headers=True):
    table = QtWidgets.QTableWidget(parent)
    table.setGeometry(geometry)
    table.setColumnCount(len(header_labels))
    table.setRowCount(num_rows)

    if not show_vertical_headers:
        table.verticalHeader().setVisible(False)
        table.verticalScrollBar().setDisabled(True)  # Disable the vertical scroll bar

    for col, label in enumerate(header_labels):
        item = QtWidgets.QTableWidgetItem(label)
        font = QtGui.QFont()
        font.setBold(True)
        item.setFont(font)
        table.setHorizontalHeaderItem(col, item)

    for row in range(num_rows):
        for col in range(table.columnCount()):
            item = QtWidgets.QTableWidgetItem()
            table.setItem(row, col, item)

    table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
    table.verticalHeader().setDefaultSectionSize(0)
    table.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
    table.verticalHeader().setDisabled(True)  # Disable adding new rows

    return table

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1322, 847)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        ### Save Data Widget ###
        # Create widget------
        self.widget_saveData = QtWidgets.QWidget(self.centralwidget)
        self.widget_saveData.setGeometry(QtCore.QRect(1080, 530, 221, 261))
        self.widget_saveData.setObjectName("widget_saveData")

        # Frame------
        self.frame_saveData = QtWidgets.QFrame(self.widget_saveData)
        self.frame_saveData.setGeometry(QtCore.QRect(0, 0, 221, 261))
        self.frame_saveData.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_saveData.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_saveData.setObjectName("frame_saveData")

        # Labels------
        self.label_path = QtWidgets.QLabel(self.widget_saveData)
        self.label_path.setGeometry(QtCore.QRect(10, 165, 41, 21))
        self.label_path.setObjectName("label_path")

        self.label_saveData = QtWidgets.QLabel(self.widget_saveData)
        self.label_saveData.setGeometry(QtCore.QRect(80, 10, 71, 20))
        self.label_saveData.setObjectName("label_saveData")

        self.label_filename = QtWidgets.QLabel(self.widget_saveData)
        self.label_filename.setGeometry(QtCore.QRect(10, 190, 71, 21))
        self.label_filename.setObjectName("label_filename")

        # Checkboxes ------
        self.checkBox_mountPos = QtWidgets.QCheckBox(self.widget_saveData)
        self.checkBox_mountPos.setGeometry(QtCore.QRect(20, 135, 116, 20))
        self.checkBox_mountPos.setObjectName("checkBox_mountPos")
        # self.checkBox_mountPos.stateChanged.connect(self.checked)

        self.checkBox_selectFluxVec = QtWidgets.QCheckBox(self.widget_saveData)
        self.checkBox_selectFluxVec.setGeometry(QtCore.QRect(20, 93, 142, 20))
        self.checkBox_selectFluxVec.setObjectName("checkBox_selectFluxVec")

        self.checkBox_fluxVec = QtWidgets.QCheckBox(self.widget_saveData)
        self.checkBox_fluxVec.setGeometry(QtCore.QRect(20, 72, 101, 20))
        self.checkBox_fluxVec.setObjectName("checkBox_fluxVec")

        self.checkBox_frame = QtWidgets.QCheckBox(self.widget_saveData)
        self.checkBox_frame.setGeometry(QtCore.QRect(20, 30, 67, 20))
        self.checkBox_frame.setObjectName("checkBox_frame")

        self.checkBox_memsPos = QtWidgets.QCheckBox(self.widget_saveData)
        self.checkBox_memsPos.setGeometry(QtCore.QRect(20, 114, 114, 20))
        self.checkBox_memsPos.setObjectName("checkBox_memsPos")

        self.checkBox_selectChannel = QtWidgets.QCheckBox(self.widget_saveData)
        self.checkBox_selectChannel.setGeometry(QtCore.QRect(20, 51, 116, 20))
        self.checkBox_selectChannel.setObjectName("checkBox_selectChannel")

        # LineEdit------
        self.text_path = QtWidgets.QLineEdit(self.widget_saveData)
        self.text_path.setGeometry(QtCore.QRect(50, 165, 151, 21))
        self.text_path.setObjectName("text_path")

        self.text_filename = QtWidgets.QLineEdit(self.widget_saveData)
        self.text_filename.setGeometry(QtCore.QRect(80, 190, 121, 21))
        self.text_filename.setObjectName("text_filename")

        # Buttons------
        self.pushButton_save = QtWidgets.QPushButton(self.widget_saveData)
        self.pushButton_save.setGeometry(QtCore.QRect(70, 220, 91, 32))
        self.pushButton_save.setObjectName("pushButton_save")

        ### Manual Mount Widget ###
        # Create Widget------
        self.widget_manualMount = QtWidgets.QWidget(self.centralwidget)
        self.widget_manualMount.setGeometry(QtCore.QRect(580, 500, 231, 291))
        self.widget_manualMount.setObjectName("widget_manualMount")

        # Frame------
        self.frame_manualMount = QtWidgets.QFrame(self.widget_manualMount)
        self.frame_manualMount.setGeometry(QtCore.QRect(0, 0, 231, 291))
        self.frame_manualMount.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_manualMount.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_manualMount.setObjectName("frame_manualMount")

        # Labels------
        self.label_manualMount = QtWidgets.QLabel(self.widget_manualMount)
        self.label_manualMount.setGeometry(QtCore.QRect(40, 10, 161, 20))
        self.label_manualMount.setObjectName("label_manualMount")

        self.label_x = QtWidgets.QLabel(self.frame_manualMount)
        self.label_x.setGeometry(QtCore.QRect(20, 60, 51, 20))
        self.label_x.setObjectName("label_x")

        self.label_y = QtWidgets.QLabel(self.frame_manualMount)
        self.label_y.setGeometry(QtCore.QRect(90, 60, 51, 21))
        self.label_y.setObjectName("label_y")

        self.label_z = QtWidgets.QLabel(self.frame_manualMount)
        self.label_z.setGeometry(QtCore.QRect(160, 60, 51, 20))
        self.label_z.setObjectName("label_z")

        self.label_pitch = QtWidgets.QLabel(self.frame_manualMount)
        self.label_pitch.setGeometry(QtCore.QRect(90, 180, 51, 21))
        self.label_pitch.setObjectName("label_pitch")

        self.label_yaw = QtWidgets.QLabel(self.frame_manualMount)
        self.label_yaw.setGeometry(QtCore.QRect(160, 180, 51, 20))
        self.label_yaw.setObjectName("label_yaw")

        self.label_roll = QtWidgets.QLabel(self.frame_manualMount)
        self.label_roll.setGeometry(QtCore.QRect(20, 180, 51, 20))
        self.label_roll.setObjectName("label_roll")

        self.label_mountStepSize_urad = QtWidgets.QLabel(self.frame_manualMount)
        self.label_mountStepSize_urad.setGeometry(QtCore.QRect(20, 260, 111, 21))
        self.label_mountStepSize_urad.setObjectName("label_mountStepSize_urad")

        self.label_mountStepSize_um = QtWidgets.QLabel(self.frame_manualMount)
        self.label_mountStepSize_um.setGeometry(QtCore.QRect(20, 140, 101, 21))
        self.label_mountStepSize_um.setObjectName("label_mountStepSize_um")

        # Buttons------
        self.pushButton_x_up = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_x_up.setGeometry(QtCore.QRect(20, 80, 51, 32))
        self.pushButton_x_up.setObjectName("pushButton_x_up")
        # self.pushButton_x_up.clicked.connect(self.x_up)

        self.pushButton_x_down = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_x_down.setGeometry(QtCore.QRect(10, 110, 71, 32))
        self.pushButton_x_down.setObjectName("pushButton_x_down")


        self.pushButton_y_up = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_y_up.setGeometry(QtCore.QRect(90, 80, 51, 32))
        self.pushButton_y_up.setObjectName("pushButton_y_up")


        self.pushButton_y_down = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_y_down.setGeometry(QtCore.QRect(80, 110, 71, 32))
        self.pushButton_y_down.setObjectName("pushButton_y_down")


        self.pushButton_z_down = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_z_down.setGeometry(QtCore.QRect(150, 110, 71, 32))
        self.pushButton_z_down.setObjectName("pushButton_z_down")


        self.pushButton_z_up = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_z_up.setGeometry(QtCore.QRect(160, 80, 51, 32))
        self.pushButton_z_up.setObjectName("pushButton_z_up")


        self.pushButton_yaw_up = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_yaw_up.setGeometry(QtCore.QRect(160, 200, 51, 32))
        self.pushButton_yaw_up.setObjectName("pushButton_yaw_up")


        self.pushButton_yaw_down = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_yaw_down.setGeometry(QtCore.QRect(150, 230, 71, 32))
        self.pushButton_yaw_down.setObjectName("pushButton_yaw_down")


        self.pushButton_roll_up = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_roll_up.setGeometry(QtCore.QRect(20, 200, 51, 32))
        self.pushButton_roll_up.setObjectName("pushButton_roll_up")


        self.pushButton_pitch_down = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_pitch_down.setGeometry(QtCore.QRect(80, 230, 71, 32))
        self.pushButton_pitch_down.setObjectName("pushButton_pitch_down")


        self.pushButton_pitch_up = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_pitch_up.setGeometry(QtCore.QRect(90, 200, 51, 32))
        self.pushButton_pitch_up.setObjectName("pushButton_pitch_up")


        self.pushButton_roll_down = QtWidgets.QPushButton(self.frame_manualMount)
        self.pushButton_roll_down.setGeometry(QtCore.QRect(10, 230, 71, 32))
        self.pushButton_roll_down.setObjectName("pushButton_roll_down")


        # Checkboxes------
        self.checkBox_manualMount = QtWidgets.QCheckBox(self.frame_manualMount)
        self.checkBox_manualMount.setGeometry(QtCore.QRect(20, 30, 211, 31))
        self.checkBox_manualMount.setObjectName("checkBox_manualMount")
        # self.checkBox_manualMount.stateChanged.connect(
        #     lambda state, table=self.table_mountPos_rpy: self.enableCellEditing(item, table))
        # self.checkBox_manualMount.stateChanged.connect(
        #     lambda state, table=self.table_mountPos_xyz: self.enableCellEditing(item, table))


        # LineEdit------
        self.text_mountStepSize_urad = QtWidgets.QLineEdit(self.frame_manualMount)
        self.text_mountStepSize_urad.setGeometry(QtCore.QRect(130, 260, 41, 21))
        self.text_mountStepSize_urad.setObjectName("text_mountStepSize_urad")



        self.text_mountStepSize_um = QtWidgets.QLineEdit(self.frame_manualMount)
        self.text_mountStepSize_um.setGeometry(QtCore.QRect(120, 140, 41, 21))
        self.text_mountStepSize_um.setObjectName("text_mountStepSize_um")



        ### Mount Position Widget ###
        # Create Widget------
        self.widget_mountPos = QtWidgets.QWidget(self.centralwidget)
        self.widget_mountPos.setGeometry(QtCore.QRect(840, 580, 211, 211))
        self.widget_mountPos.setObjectName("widget_mountPos")

        # Frame------
        self.frame_mountPos = QtWidgets.QFrame(self.widget_mountPos)
        self.frame_mountPos.setGeometry(QtCore.QRect(0, 0, 211, 211))
        self.frame_mountPos.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_mountPos.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_mountPos.setObjectName("frame_mountPos")

        # Labels------
        self.label_mountPosition = QtWidgets.QLabel(self.frame_mountPos)
        self.label_mountPosition.setGeometry(QtCore.QRect(50, 10, 111, 20))
        self.label_mountPosition.setObjectName("label_mountPosition")

        # Table------
        self.table_mountPos_rpy = create_table(self.frame_mountPos, QtCore.QRect(20, 120, 161, 51),
                                               ["Header1", "Header2", "Header3"], num_rows = 1, show_vertical_headers = False)
        self.table_mountPos_xyz = create_table(self.frame_mountPos, QtCore.QRect(20, 60, 161, 51),
                                               ["Header1", "Header2", "Header3"], num_rows = 1, show_vertical_headers = False)

        self.setTableEditable(self.table_mountPos_rpy, False)
        self.setTableEditable(self.table_mountPos_xyz, False)


        # Buttons------
        self.pushButton_setMount_0 = QtWidgets.QPushButton(self.frame_mountPos)
        self.pushButton_setMount_0.setGeometry(QtCore.QRect(40, 175, 131, 30))
        self.pushButton_setMount_0.setObjectName("pushButton_setMount_0")

        # Checkboxes------
        self.checkBox_mountTruePos = QtWidgets.QCheckBox(self.frame_mountPos)
        self.checkBox_mountTruePos.setGeometry(QtCore.QRect(20, 30, 211, 20))
        self.checkBox_mountTruePos.setObjectName("checkBox_mountTruePos")


        ### Camera Display Widget ###
        # Widget------
        self.widget_camDisplay = QtWidgets.QWidget(self.centralwidget)
        self.widget_camDisplay.setGeometry(QtCore.QRect(30, 20, 241, 631))
        self.widget_camDisplay.setObjectName("widget_camDisplay")

        # Frame------
        self.frame_camDisplay = QtWidgets.QFrame(self.widget_camDisplay)
        self.frame_camDisplay.setGeometry(QtCore.QRect(0, 0, 241, 631))
        self.frame_camDisplay.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_camDisplay.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_camDisplay.setObjectName("frame_camDisplay")
        self.frame_camDisplay.setObjectName("frame_camDisplay")

        # Labels------
        self.label_CameraDisplay = QtWidgets.QLabel(self.widget_camDisplay)
        self.label_CameraDisplay.setGeometry(QtCore.QRect(50, 10, 141, 20))
        self.label_CameraDisplay.setObjectName("label_CameraDisplay")

        self.label_minx = QtWidgets.QLabel(self.widget_camDisplay)
        self.label_minx.setGeometry(QtCore.QRect(20, 600, 60, 16))
        self.label_minx.setObjectName("label_minx")

        self.label_maxx = QtWidgets.QLabel(self.widget_camDisplay)
        self.label_maxx.setGeometry(QtCore.QRect(130, 600, 60, 16))
        self.label_maxx.setObjectName("label_maxx")

        self.label_Timestamp = QtWidgets.QLabel(self.widget_camDisplay)
        self.label_Timestamp.setGeometry(QtCore.QRect(20, 100, 81, 16))
        self.label_Timestamp.setObjectName("label_Timestamp")

        self.label_Date = QtWidgets.QLabel(self.widget_camDisplay)
        self.label_Date.setGeometry(QtCore.QRect(60, 70, 81, 16))
        self.label_Date.setObjectName("label_Date")

        # Checkboxes------
        self.checkBox_livecam = QtWidgets.QCheckBox(self.widget_camDisplay)
        self.checkBox_livecam.setGeometry(QtCore.QRect(20, 40, 141, 20))
        self.checkBox_livecam.setObjectName("checkBox_livecam")

        # LineEdit------
        self.text_minx = QtWidgets.QLineEdit(self.widget_camDisplay)
        self.text_minx.setGeometry(QtCore.QRect(60, 600, 41, 21))
        self.text_minx.setObjectName("text_minx")

        self.text_maxx = QtWidgets.QLineEdit(self.widget_camDisplay)
        self.text_maxx.setGeometry(QtCore.QRect(180, 600, 41, 21))
        self.text_maxx.setObjectName("text_maxx")

        self.text_Timestamp = QtWidgets.QLineEdit(self.widget_camDisplay)
        self.text_Timestamp.setGeometry(QtCore.QRect(100, 100, 71, 21))
        self.text_Timestamp.setObjectName("text_Timestamp")

        self.text_Date = QtWidgets.QLineEdit(self.widget_camDisplay)
        self.text_Date.setGeometry(QtCore.QRect(100, 70, 91, 21))
        self.text_Date.setObjectName("text_Date")

        # Graphics------
        self.graphics_camDisplay = QtWidgets.QGraphicsView(self.frame_camDisplay)
        self.graphics_camDisplay.setGeometry(QtCore.QRect(10, 130, 221, 461))
        self.graphics_camDisplay.setObjectName("graphics_camDisplay")



        ### MEMs graphics Widget ###

        # Widget------
        self.widget_memsGraphics = QtWidgets.QWidget(self.centralwidget)
        self.widget_memsGraphics.setGeometry(QtCore.QRect(30, 660, 241, 131))
        self.widget_memsGraphics.setObjectName("widget_memsGraphics")

        # Frame------
        self.frame_memsGraphics = QtWidgets.QFrame(self.widget_memsGraphics)
        self.frame_memsGraphics.setGeometry(QtCore.QRect(0, 0, 241, 131))
        self.frame_memsGraphics.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_memsGraphics.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_memsGraphics.setObjectName("frame_memsGraphics")

        # Labels------
        self.label_memsGraphics = QtWidgets.QLabel(self.frame_memsGraphics)
        self.label_memsGraphics.setGeometry(QtCore.QRect(60, 0, 151, 31))
        self.label_memsGraphics.setObjectName("label_memsGraphics")

        # Graphics------
        self.graphics_memsGraphics = QtWidgets.QGraphicsView(self.frame_memsGraphics)
        self.graphics_memsGraphics.setGeometry(QtCore.QRect(10, 30, 221, 91))
        self.graphics_memsGraphics.setObjectName("graphics_memsGraphics")


        ### Manual MEMs Widget ###

        # Frame------
        self.frame_manualMEMs = QtWidgets.QFrame(self.centralwidget)
        self.frame_manualMEMs.setGeometry(QtCore.QRect(580, 250, 231, 241))
        self.frame_manualMEMs.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_manualMEMs.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_manualMEMs.setObjectName("frame_manualMEMs")

        # Widget------
        self.widget_manualMEMs = QtWidgets.QWidget(self.frame_manualMEMs)
        self.widget_manualMEMs.setGeometry(QtCore.QRect(0, 0, 231, 241))
        self.widget_manualMEMs.setObjectName("widget_manualMEMs")

        # Labels------
        self.label_piston = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_piston.setGeometry(QtCore.QRect(20, 150, 51, 20))
        self.label_piston.setObjectName("label_piston")

        self.label_tip = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_tip.setGeometry(QtCore.QRect(90, 150, 51, 21))
        self.label_tip.setObjectName("label_tip")

        self.label_tilt = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_tilt.setGeometry(QtCore.QRect(160, 150, 51, 20))
        self.label_tilt.setObjectName("label_tilt")

        self.label_manualMEMs = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_manualMEMs.setGeometry(QtCore.QRect(40, 10, 161, 20))
        self.label_manualMEMs.setObjectName("label_manualMEMs")

        self.label_memsSegment = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_memsSegment.setGeometry(QtCore.QRect(20, 60, 121, 16))
        self.label_memsSegment.setObjectName("label_memsSegment")

        self.label_pist = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_pist.setGeometry(QtCore.QRect(20, 90, 91, 21))
        self.label_pist.setObjectName("label_pist")

        self.label_tt = QtWidgets.QLabel(self.widget_manualMEMs)
        self.label_tt.setGeometry(QtCore.QRect(20, 120, 61, 21))
        self.label_tt.setObjectName("label_tt")

        # Checkbox------
        self.checkBox_manualMEMs = QtWidgets.QCheckBox(self.widget_manualMEMs)
        self.checkBox_manualMEMs.setGeometry(QtCore.QRect(20, 30, 211, 31))
        self.checkBox_manualMEMs.setObjectName("checkBox_manualMEMs")

        # Buttons------
        self.pushButton_piston_up = QtWidgets.QPushButton(self.widget_manualMEMs)
        self.pushButton_piston_up.setGeometry(QtCore.QRect(20, 170, 51, 32))
        self.pushButton_piston_up.setObjectName("pushButton_piston_up")

        self.pushButton_tip_up = QtWidgets.QPushButton(self.widget_manualMEMs)
        self.pushButton_tip_up.setGeometry(QtCore.QRect(90, 170, 51, 32))
        self.pushButton_tip_up.setObjectName("pushButton_tip_up")

        self.pushButton_tilt_up = QtWidgets.QPushButton(self.widget_manualMEMs)
        self.pushButton_tilt_up.setGeometry(QtCore.QRect(160, 170, 51, 32))
        self.pushButton_tilt_up.setObjectName("pushButton_tilt_up")

        self.pushButton_piston_down = QtWidgets.QPushButton(self.widget_manualMEMs)
        self.pushButton_piston_down.setGeometry(QtCore.QRect(10, 200, 71, 32))
        self.pushButton_piston_down.setObjectName("pushButton_piston_down")

        self.pushButton_tip_down = QtWidgets.QPushButton(self.widget_manualMEMs)
        self.pushButton_tip_down.setGeometry(QtCore.QRect(80, 200, 71, 32))
        self.pushButton_tip_down.setObjectName("pushButton_tip_down")

        self.pushButton_tilt_down = QtWidgets.QPushButton(self.widget_manualMEMs)
        self.pushButton_tilt_down.setGeometry(QtCore.QRect(150, 200, 71, 32))
        self.pushButton_tilt_down.setObjectName("pushButton_tilt_down")

        # # LineEdit------
        # self.dropDown_memsSegment = QtWidgets.QLineEdit(self.widget_manualMEMs)
        # self.dropDown_memsSegment.setGeometry(QtCore.QRect(140, 60, 31, 21))
        # self.dropDown_memsSegment.setObjectName("dropDown_memsSegment")

        # # Dropdown------
        # self.dropDown_memsSegment = QtWidgets.QComboBox(self.widget_manualMEMs)
        # self.dropDown_memsSegment.setGeometry(QtCore.QRect(100, 60,60, 21))
        # self.dropDown_memsSegment.setObjectName("dropDown_memsSegment")
        #
        # # Add items to dropdown menu
        # n = 9
        # for i in range(n):
        #     self.dropDown_memsSegment.addItem(str(i))

        # # Dropdown
        # self.dropDown_memsSegment = QtWidgets.QComboBox(self.widget_manualMEMs)
        # self.dropDown_memsSegment.setGeometry(QtCore.QRect(100, 60, 90, 21))
        # self.dropDown_memsSegment.setObjectName("dropDown_memsSegment")
        # self.dropDown_memsSegment.setView(QtWidgets.QListView())
        # self.dropDown_memsSegment.view().setSelectionMode(QtWidgets.QListView.MultiSelection)
        #
        # # Add items to dropdown menu
        # n = 9
        # for i in range(n):
        #     item = QtGui.QStandardItem(str(i))
        #     item.setCheckable(True)
        #     self.dropDown_memsSegment.model().appendRow(item)

        # Button to toggle visibility
        self.toggleButton = QtWidgets.QPushButton("Select", self.widget_manualMEMs)
        self.toggleButton.setGeometry(QtCore.QRect(100, 55, 90, 30))
        self.toggleButton.clicked.connect(self.toggleList)
        # layout.addWidget(self.toggleButton)

        # List widget with multi-selection
        self.listWidget = QtWidgets.QListWidget(self.widget_manualMEMs)
        self.listWidget.setGeometry(QtCore.QRect(110, 85, 60, 90))
        self.listWidget.setSelectionMode(QtWidgets.QListWidget.MultiSelection)
        self.listWidget.setVisible(False)  # Initially hidden

        # Add items to the list widget
        n = 9
        for i in range(n):
            item = QtWidgets.QListWidgetItem(f"{i+1}")
            item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
            item.setCheckState(QtCore.Qt.Unchecked)
            self.listWidget.addItem(item)


        self.text_pistStepSize = QtWidgets.QLineEdit(self.widget_manualMEMs)
        self.text_pistStepSize.setGeometry(QtCore.QRect(90, 90, 41, 21))
        self.text_pistStepSize.setText("")
        self.text_pistStepSize.setObjectName("text_pistStepSize")


        self.text_ttStepSize = QtWidgets.QLineEdit(self.widget_manualMEMs)
        self.text_ttStepSize.setGeometry(QtCore.QRect(90, 120, 41, 21))
        self.text_ttStepSize.setText("")
        self.text_ttStepSize.setObjectName("text_ttStepSize")


        ### MEMs Position ###

        # Frame------
        self.frame_memsPos = QtWidgets.QFrame(self.centralwidget)
        self.frame_memsPos.setGeometry(QtCore.QRect(840, 250, 211, 321))
        self.frame_memsPos.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_memsPos.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_memsPos.setObjectName("frame_memsPos")

        # Widget------
        self.widget_memsPos = QtWidgets.QWidget(self.frame_memsPos)
        self.widget_memsPos.setGeometry(QtCore.QRect(0, 0, 211, 321))
        self.widget_memsPos.setObjectName("widget_memsPos")


        # Table------
        self.tab_memsPosition = create_table(self.frame_memsPos, QtCore.QRect(15, 60, 179, 221),
                                               ["Header1", "Header2", "Header3"], num_rows=9)
        self.tab_memsPosition.itemChanged.connect(self.on_item_changed)
        self.setTableEditable(self.tab_memsPosition, False)

        # Labels------
        self.label_memsPosition = QtWidgets.QLabel(self.widget_memsPos)
        self.label_memsPosition.setGeometry(QtCore.QRect(59, 10, 101, 20))
        self.label_memsPosition.setObjectName("label_memsPosition")

        # Buttons------
        self.pushButton_setMEMs0 = QtWidgets.QPushButton(self.widget_memsPos)
        self.pushButton_setMEMs0.setGeometry(QtCore.QRect(40, 285, 131, 30))
        self.pushButton_setMEMs0.setObjectName("pushButton_setMEMs0")

        # Checkbox------
        self.checkBox_memsTruePos = QtWidgets.QCheckBox(self.widget_memsPos)
        self.checkBox_memsTruePos.setGeometry(QtCore.QRect(30, 30, 211, 21))
        self.checkBox_memsTruePos.setObjectName("checkBox_memsTruePos")



        ### History Log ###

        # Frame------
        self.frame_historyLog = QtWidgets.QFrame(self.centralwidget)
        self.frame_historyLog.setGeometry(QtCore.QRect(1080, 250, 221, 271))
        self.frame_historyLog.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_historyLog.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_historyLog.setObjectName("frame_historyLog")

        # Widget------
        self.widget_historyLog = QtWidgets.QWidget(self.frame_historyLog)
        self.widget_historyLog.setGeometry(QtCore.QRect(0, 0, 221, 271))
        self.widget_historyLog.setObjectName("widget_historyLog")

        # Label------
        self.label_historyLog = QtWidgets.QLabel(self.widget_historyLog)
        self.label_historyLog.setGeometry(QtCore.QRect(40, 10, 131, 17))
        self.label_historyLog.setObjectName("label_historyLog")

        # Text Browser------
        self.textBrowser_history = QtWidgets.QTextBrowser(self.widget_historyLog)
        self.textBrowser_history.setGeometry(QtCore.QRect(20, 40, 181, 221))
        self.textBrowser_history.setObjectName("textBrowser_history")

        # Vertical Scroll Bar------
        self.verticalScrollBar = QtWidgets.QScrollBar(self.widget_historyLog)
        self.verticalScrollBar.setGeometry(QtCore.QRect(180, 49, 20, 201))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")


        ### TT Scan ###

        # Widget------
        self.widget_ttOptimise = QtWidgets.QWidget(self.centralwidget)
        self.widget_ttOptimise.setGeometry(QtCore.QRect(300, 250, 251, 261))
        self.widget_ttOptimise.setObjectName("widget_ttOptimise")

        # Frame------
        self.frame_ttOptimise = QtWidgets.QFrame(self.widget_ttOptimise)
        self.frame_ttOptimise.setGeometry(QtCore.QRect(0, 0, 251, 261))
        self.frame_ttOptimise.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_ttOptimise.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_ttOptimise.setObjectName("frame_ttOptimise")

        # Label------
        self.label_ttOptimisation = QtWidgets.QLabel(self.widget_ttOptimise)
        self.label_ttOptimisation.setGeometry(QtCore.QRect(50, 10, 141, 20))
        self.label_ttOptimisation.setObjectName("label_ttOptimisation")

        self.label_ttSegment = QtWidgets.QLabel(self.frame_ttOptimise)
        self.label_ttSegment.setGeometry(QtCore.QRect(20, 30, 131, 20))
        self.label_ttSegment.setObjectName("label_ttSegment")

        self.label_tipRange = QtWidgets.QLabel(self.frame_ttOptimise)
        self.label_tipRange.setGeometry(QtCore.QRect(20, 60, 111, 20))
        self.label_tipRange.setObjectName("label_tipRange")

        self.label_2Dplot = QtWidgets.QLabel(self.frame_ttOptimise)
        self.label_2Dplot.setGeometry(QtCore.QRect(90, 190, 60, 16))
        self.label_2Dplot.setObjectName("label_2Dplot")

        self.label_tiltRange = QtWidgets.QLabel(self.frame_ttOptimise)
        self.label_tiltRange.setGeometry(QtCore.QRect(20, 90, 111, 20))
        self.label_tiltRange.setObjectName("label_tiltRange")

        # Drop Down Menu------
        self.dropDown_ttSegment = QtWidgets.QComboBox(self.frame_ttOptimise)
        self.dropDown_ttSegment.setGeometry(QtCore.QRect(140, 30, 50, 26))
        self.dropDown_ttSegment.setObjectName("dropDown_ttSegment")

        # Add items to dropdown menu
        n = 9
        for i in range(n):
            self.dropDown_ttSegment.addItem(str(i+1))

        # Graphics------
        self.graphics_2Dplot = QtWidgets.QGraphicsView(self.frame_ttOptimise)
        self.graphics_2Dplot.setGeometry(QtCore.QRect(20, 150, 201, 101))
        self.graphics_2Dplot.setObjectName("graphics_2Dplot")

        # Pushbutton------
        self.pushButton_ttScan = QtWidgets.QPushButton(self.frame_ttOptimise)
        self.pushButton_ttScan.setGeometry(QtCore.QRect(30, 120, 181, 32))
        self.pushButton_ttScan.setObjectName("pushButton_ttScan")

        # LineEdit------
        self.text_tipRange = QtWidgets.QLineEdit(self.frame_ttOptimise)
        self.text_tipRange.setGeometry(QtCore.QRect(130, 60, 91, 21))
        self.text_tipRange.setObjectName("text_tipRange")

        self.text_tiltRange = QtWidgets.QLineEdit(self.frame_ttOptimise)
        self.text_tiltRange.setGeometry(QtCore.QRect(130, 90, 91, 21))
        self.text_tiltRange.setObjectName("text_tiltRange")


        ### Piston Scan ###

        # Widget------
        self.widget_pistonScan = QtWidgets.QWidget(self.centralwidget)
        self.widget_pistonScan.setGeometry(QtCore.QRect(300, 520, 251, 271))
        self.widget_pistonScan.setObjectName("widget_pistonScan")

        # Frame------
        self.frame_pistonScan = QtWidgets.QFrame(self.widget_pistonScan)
        self.frame_pistonScan.setGeometry(QtCore.QRect(0, 0, 251, 271))
        self.frame_pistonScan.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_pistonScan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_pistonScan.setObjectName("frame_pistonScan")

        # Labels------
        self.label_nullingOptimisation = QtWidgets.QLabel(self.frame_pistonScan)
        self.label_nullingOptimisation.setGeometry(QtCore.QRect(50, 10, 151, 16))
        self.label_nullingOptimisation.setObjectName("label_nullingOptimisation")

        self.label_nullScan = QtWidgets.QLabel(self.frame_pistonScan)
        self.label_nullScan.setGeometry(QtCore.QRect(50, 40, 91, 20))
        self.label_nullScan.setObjectName("label_nullScan")

        self.label_nullRange = QtWidgets.QLabel(self.frame_pistonScan)
        self.label_nullRange.setGeometry(QtCore.QRect(40, 100, 171, 20))
        self.label_nullRange.setObjectName("label_nullRange")

        self.label_sinusoid = QtWidgets.QLabel(self.frame_pistonScan)
        self.label_sinusoid.setGeometry(QtCore.QRect(70, 200, 121, 16))
        self.label_sinusoid.setObjectName("label_sinusoid")

        # Graphics------
        self.graphics_sinusoid = QtWidgets.QGraphicsView(self.frame_pistonScan)
        self.graphics_sinusoid.setGeometry(QtCore.QRect(20, 160, 211, 101))
        self.graphics_sinusoid.setObjectName("graphics_sinusoid")

        # Dropdown------
        self.dropDown_nulls = QtWidgets.QComboBox(self.frame_pistonScan)
        self.dropDown_nulls.setGeometry(QtCore.QRect(140, 40, 61, 26))
        self.dropDown_nulls.setObjectName("dropDown_nulls")

        # Add items to dropdown menu
        n = 12
        for i in range(n):
            self.dropDown_nulls.addItem("")

        # Pushbutton------
        self.pushButton_pistonScan = QtWidgets.QPushButton(self.frame_pistonScan)
        self.pushButton_pistonScan.setGeometry(QtCore.QRect(40, 130, 171, 32))
        self.pushButton_pistonScan.setObjectName("pushButton_pistonScan")

        # LineEdit------
        self.text_nullRange = QtWidgets.QLineEdit(self.frame_pistonScan)
        self.text_nullRange.setGeometry(QtCore.QRect(130, 100, 91, 21))
        self.text_nullRange.setObjectName("text_nullRange")

        # Radio Button------
        self.radioButton_seg1 = QtWidgets.QRadioButton(self.frame_pistonScan)
        self.radioButton_seg1.setGeometry(QtCore.QRect(20, 70, 100, 20))
        self.radioButton_seg1.setObjectName("radioButton_seg1")

        self.radioButton_seg2 = QtWidgets.QRadioButton(self.frame_pistonScan)
        self.radioButton_seg2.setGeometry(QtCore.QRect(120, 70, 100, 20))
        self.radioButton_seg2.setObjectName("radioButton_seg2")


        ### FLux vs. Time ###

        # Widget------
        self.widget_fluxVtime = QtWidgets.QWidget(self.centralwidget)
        self.widget_fluxVtime.setGeometry(QtCore.QRect(300, 20, 361, 201))
        self.widget_fluxVtime.setObjectName("widget_fluxVtime")

        # Frame------
        self.frame_fluxVtime = QtWidgets.QFrame(self.widget_fluxVtime)
        self.frame_fluxVtime.setGeometry(QtCore.QRect(0, 0, 361, 201))
        self.frame_fluxVtime.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_fluxVtime.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_fluxVtime.setObjectName("frame_fluxVtime")

        # Graphics------
        self.graphics_fluxVtime = QtWidgets.QGraphicsView(self.frame_fluxVtime)
        self.graphics_fluxVtime.setGeometry(QtCore.QRect(10, 40, 341, 151))
        self.graphics_fluxVtime.setObjectName("graphics_fluxVtime")

        # Label------
        self.label_fluxVtime = QtWidgets.QLabel(self.frame_fluxVtime)
        self.label_fluxVtime.setGeometry(QtCore.QRect(120, 10, 161, 20))
        self.label_fluxVtime.setObjectName("label_fluxVtime")


        ### Spectral Flux ###

        # Widget------
        self.widget_spectralFlux = QtWidgets.QWidget(self.centralwidget)
        self.widget_spectralFlux.setGeometry(QtCore.QRect(690, 20, 361, 201))
        self.widget_spectralFlux.setObjectName("widget_spectralFlux")

        # Frame------
        self.frame_spectralFlux = QtWidgets.QFrame(self.widget_spectralFlux)
        self.frame_spectralFlux.setGeometry(QtCore.QRect(0, 0, 361, 201))
        self.frame_spectralFlux.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_spectralFlux.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_spectralFlux.setObjectName("frame_spectralFlux")

        # Graphics------
        self.graphics_spectralFlux = QtWidgets.QGraphicsView(self.frame_spectralFlux)
        self.graphics_spectralFlux.setGeometry(QtCore.QRect(10, 40, 341, 151))
        self.graphics_spectralFlux.setObjectName("graphics_spectralFlux")

        # Labels------
        self.label_spectralFlux = QtWidgets.QLabel(self.frame_spectralFlux)
        self.label_spectralFlux.setGeometry(QtCore.QRect(130, 6, 101, 31))
        self.label_spectralFlux.setObjectName("label_spectralFlux")

        # Dropdown------
        self.dropDown_spectralFlux = QtWidgets.QComboBox(self.frame_spectralFlux)
        self.dropDown_spectralFlux.setGeometry(QtCore.QRect(270, 10, 81, 26))
        self.dropDown_spectralFlux.setObjectName("dropDown_spectralFlux")

        # Add items to dropdown menu
        n = 16
        for i in range(n):
            self.dropDown_spectralFlux.addItem("")


        ### System Overview ###

        # Widget------
        self.widget_systemOverview = QtWidgets.QWidget(self.centralwidget)
        self.widget_systemOverview.setGeometry(QtCore.QRect(1080, 20, 221, 201))
        self.widget_systemOverview.setObjectName("widget_systemOverview")

        # Frame------
        self.frame_systemOverview = QtWidgets.QFrame(self.widget_systemOverview)
        self.frame_systemOverview.setGeometry(QtCore.QRect(0, 0, 221, 201))
        self.frame_systemOverview.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_systemOverview.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_systemOverview.setObjectName("frame_systemOverview")

        # Label------
        self.label_systemOverview = QtWidgets.QLabel(self.frame_systemOverview)
        self.label_systemOverview.setGeometry(QtCore.QRect(50, 10, 131, 20))
        self.label_systemOverview.setObjectName("label_systemOverview")

        # Text------
        self.textBrowser_system = QtWidgets.QTextBrowser(self.frame_systemOverview)
        self.textBrowser_system.setGeometry(QtCore.QRect(10, 40, 201, 151))
        self.textBrowser_system.setObjectName("textBrowser_system")


        ### FUNCTIONS ###
        self.pushButton_save.clicked.connect(self.save)
        # self.installEventFilter(self)

        self.pushButton_setMEMs0.clicked.connect(
            lambda pressed, table=self.tab_memsPosition: self.resetTable(pressed, table))


        self.pushButton_x_up.clicked.connect(self.x_up)
        self.pushButton_x_down.clicked.connect(self.x_down)
        self.pushButton_y_up.clicked.connect(self.y_up)
        self.pushButton_y_down.clicked.connect(self.y_down)
        self.pushButton_z_down.clicked.connect(self.z_down)
        self.pushButton_z_up.clicked.connect(self.z_up)
        self.pushButton_yaw_up.clicked.connect(self.yaw_up)
        self.pushButton_yaw_down.clicked.connect(self.yaw_down)
        self.pushButton_roll_up.clicked.connect(self.roll_up)
        self.pushButton_pitch_down.clicked.connect(self.pitch_down)
        self.pushButton_pitch_up.clicked.connect(self.pitch_up)
        self.pushButton_roll_down.clicked.connect(self.roll_down)
        self.pushButton_piston_up.clicked.connect(self.pist_up)
        self.pushButton_piston_down.clicked.connect(self.pist_down)
        self.pushButton_tilt_up.clicked.connect(self.tilt_up)
        self.pushButton_tilt_down.clicked.connect(self.tilt_down)
        self.pushButton_tip_up.clicked.connect(self.tip_up)
        self.pushButton_tip_down.clicked.connect(self.tip_down)


        self.checkBox_manualMEMs.stateChanged.connect(
            lambda state, table=self.tab_memsPosition: self.toggleEditable(state, table))
        self.checkBox_manualMount.stateChanged.connect(
            lambda state, table=self.table_mountPos_rpy: self.toggleEditable(state, table))
        self.checkBox_manualMount.stateChanged.connect(
            lambda state, table=self.table_mountPos_xyz: self.toggleEditable(state, table))
        self.text_pistStepSize.textChanged.connect(
            lambda text, le=self.text_pistStepSize: self.on_text_changed(text, le))
        self.text_ttStepSize.textChanged.connect(
            lambda text, le=self.text_ttStepSize: self.on_text_changed(text, le))
        self.text_mountStepSize_urad.textChanged.connect(
            lambda text, le=self.text_mountStepSize_urad: self.on_text_changed(text, le))
        self.text_mountStepSize_um.textChanged.connect(
            lambda text, le=self.text_mountStepSize_um: self.on_text_changed(text, le))

        self.table_mountPos_rpy.itemChanged.connect(self.on_item_changed)
        self.table_mountPos_xyz.itemChanged.connect(self.on_item_changed)
        self.tab_memsPosition.itemChanged.connect(self.on_item_changed)




        ### OTHER ###
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1322, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.checkBox_mountPos.setText(_translate("MainWindow", "Mount Position"))
        self.checkBox_selectFluxVec.setText(_translate("MainWindow", "Select Flux Vectors"))
        self.checkBox_fluxVec.setText(_translate("MainWindow", "Flux Vectors"))
        self.checkBox_frame.setText(_translate("MainWindow", "Frame"))
        self.checkBox_memsPos.setText(_translate("MainWindow", "MEMs Position"))
        self.checkBox_selectChannel.setText(_translate("MainWindow", "Select Channel"))
        self.label_path.setText(_translate("MainWindow", "Path:"))
        self.label_saveData.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Save Data</span></p></body></html>"))
        self.label_filename.setText(_translate("MainWindow", "Filename:"))
        self.pushButton_save.setText(_translate("MainWindow", "Save"))
        self.label_manualMount.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Manual Mount Control</span></p></body></html>"))
        self.label_x.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">x</span></p></body></html>"))
        self.pushButton_y_up.setText(_translate("MainWindow", "UP"))
        self.pushButton_x_up.setText(_translate("MainWindow", "UP"))
        self.label_z.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">z</span></p></body></html>"))
        self.pushButton_y_down.setText(_translate("MainWindow", "DOWN"))
        self.pushButton_x_down.setText(_translate("MainWindow", "DOWN"))
        self.pushButton_z_down.setText(_translate("MainWindow", "DOWN"))
        self.pushButton_z_up.setText(_translate("MainWindow", "UP"))
        self.label_y.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">y</span></p></body></html>"))
        self.pushButton_yaw_down.setText(_translate("MainWindow", "DOWN"))
        self.pushButton_roll_up.setText(_translate("MainWindow", "UP"))
        self.pushButton_pitch_up.setText(_translate("MainWindow", "UP"))
        self.label_pitch.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Pitch</span></p></body></html>"))
        self.label_yaw.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Yaw</span></p></body></html>"))
        self.pushButton_yaw_up.setText(_translate("MainWindow", "UP"))
        self.pushButton_pitch_down.setText(_translate("MainWindow", "DOWN"))
        self.label_roll.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Roll</span></p></body></html>"))
        self.pushButton_roll_down.setText(_translate("MainWindow", "DOWN"))
        self.label_mountStepSize_urad.setText(_translate("MainWindow", "Step size (urad):"))
        self.checkBox_manualMount.setText(_translate("MainWindow", "Enable Manual Control"))
        self.label_mountStepSize_um.setText(_translate("MainWindow", "Step size (um):"))
        self.pushButton_setMount_0.setText(_translate("MainWindow", "Set Mount to 0"))

        item = self.table_mountPos_rpy.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Roll"))
        item = self.table_mountPos_rpy.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Pitch"))
        item = self.table_mountPos_rpy.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Yaw"))
        __sortingEnabled = self.table_mountPos_rpy.isSortingEnabled()
        self.table_mountPos_rpy.setSortingEnabled(False)
        item = self.table_mountPos_rpy.item(0, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.table_mountPos_rpy.item(0, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.table_mountPos_rpy.item(0, 2)
        item.setText(_translate("MainWindow", "0.00"))
        self.table_mountPos_rpy.setSortingEnabled(__sortingEnabled)
        item = self.table_mountPos_xyz.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "x"))
        item = self.table_mountPos_xyz.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "y"))
        item = self.table_mountPos_xyz.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "z"))
        __sortingEnabled = self.table_mountPos_xyz.isSortingEnabled()
        self.table_mountPos_xyz.setSortingEnabled(False)
        item = self.table_mountPos_xyz.item(0, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.table_mountPos_xyz.item(0, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.table_mountPos_xyz.item(0, 2)
        item.setText(_translate("MainWindow", "0.00"))
        self.table_mountPos_xyz.setSortingEnabled(__sortingEnabled)
        self.checkBox_mountTruePos.setText(_translate("MainWindow", "Show True Position"))
        self.label_mountPosition.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Mount Position</span></p></body></html>"))
        self.label_CameraDisplay.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Camera Display</span></p></body></html>"))
        self.checkBox_livecam.setText(_translate("MainWindow", "Live Camera Feed"))
        self.label_minx.setText(_translate("MainWindow", "Min x:"))
        self.label_maxx.setText(_translate("MainWindow", "Max x:"))
        self.label_Timestamp.setText(_translate("MainWindow", "Timestamp:"))
        self.text_Timestamp.setText(_translate("MainWindow", "hh:mm:ss"))
        self.text_Date.setText(_translate("MainWindow", "yyyy-mm-dd"))
        self.label_Date.setText(_translate("MainWindow", "Date:"))
        self.label_memsGraphics.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Segments in Use</span></p></body></html>"))
        self.checkBox_manualMEMs.setText(_translate("MainWindow", "Enable Manual Control"))
        self.label_piston.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Pistion</span></p></body></html>"))
        self.label_tip.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Tip</span></p></body></html>"))
        self.label_tilt.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Tilt</span></p></body></html>"))
        self.pushButton_piston_up.setText(_translate("MainWindow", "UP"))
        self.pushButton_tip_up.setText(_translate("MainWindow", "UP"))
        self.pushButton_tilt_up.setText(_translate("MainWindow", "UP"))
        self.pushButton_piston_down.setText(_translate("MainWindow", "DOWN"))
        self.pushButton_tip_down.setText(_translate("MainWindow", "DOWN"))
        self.pushButton_tilt_down.setText(_translate("MainWindow", "DOWN"))
        self.label_memsSegment.setText(_translate("MainWindow", "Segment(s):"))
        # self.dropDown_memsSegment.setItemText(0, _translate("MainWindow", "All"))
        # self.dropDown_memsSegment.setItemText(1, _translate("MainWindow", "1"))
        # self.dropDown_memsSegment.setItemText(2, _translate("MainWindow", "2"))
        # self.dropDown_memsSegment.setItemText(3, _translate("MainWindow", "3"))
        # self.dropDown_memsSegment.setItemText(4, _translate("MainWindow", "4"))
        # self.dropDown_memsSegment.setItemText(5, _translate("MainWindow", "5"))
        # self.dropDown_memsSegment.setItemText(6, _translate("MainWindow", "6"))
        # self.dropDown_memsSegment.setItemText(7, _translate("MainWindow", "7"))
        # self.dropDown_memsSegment.setItemText(8, _translate("MainWindow", "8"))
        # self.dropDown_memsSegment.setItemText(9, _translate("MainWindow", "9"))

        self.label_manualMEMs.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Manual MEMs Control</span></p></body></html>"))
        self.label_pist.setText(_translate("MainWindow", "Pist (um):"))
        self.label_tt.setText(_translate("MainWindow", "TT (urad):"))
        item = self.tab_memsPosition.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Piston"))
        item = self.tab_memsPosition.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Tip"))
        item = self.tab_memsPosition.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Tilt"))
        __sortingEnabled = self.tab_memsPosition.isSortingEnabled()
        self.tab_memsPosition.setSortingEnabled(False)
        item = self.tab_memsPosition.item(0, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(0, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(0, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(1, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(1, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(1, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(2, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(2, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(2, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(3, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(3, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(3, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(4, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(4, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(4, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(5, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(5, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(5, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(6, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(6, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(6, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(7, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(7, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(7, 2)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(8, 0)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(8, 1)
        item.setText(_translate("MainWindow", "0.00"))
        item = self.tab_memsPosition.item(8, 2)
        item.setText(_translate("MainWindow", "0.00"))
        self.tab_memsPosition.setSortingEnabled(__sortingEnabled)
        self.label_memsPosition.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">MEMs position</span></p></body></html>"))
        self.pushButton_setMEMs0.setText(_translate("MainWindow", "Set MEMs to 0"))
        self.checkBox_memsTruePos.setText(_translate("MainWindow", "Show True Position"))
        self.label_historyLog.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">History Log</span></p></body></html>"))
        self.label_ttOptimisation.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">TT Optimation</span></p></body></html>"))
        self.label_ttSegment.setText(_translate("MainWindow", "Segment to Move:"))
        self.label_tipRange.setText(_translate("MainWindow", "Tip Scan Range:"))
        self.pushButton_ttScan.setText(_translate("MainWindow", "TT Scan"))
        self.label_2Dplot.setText(_translate("MainWindow", "2D plot"))
        self.text_tipRange.setText(_translate("MainWindow", "min:step:max"))
        self.label_tiltRange.setText(_translate("MainWindow", "Tilt Scan Range:"))
        self.text_tiltRange.setText(_translate("MainWindow", "min:step:max"))
        self.label_nullingOptimisation.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Nulling Optimsation</span></p></body></html>"))
        self.label_nullScan.setText(_translate("MainWindow", "Null to Scan:"))
        self.dropDown_nulls.setItemText(0, _translate("MainWindow", "N1"))
        self.dropDown_nulls.setItemText(1, _translate("MainWindow", "N2"))
        self.dropDown_nulls.setItemText(2, _translate("MainWindow", "N3"))
        self.dropDown_nulls.setItemText(3, _translate("MainWindow", "N4"))
        self.dropDown_nulls.setItemText(4, _translate("MainWindow", "N5"))
        self.dropDown_nulls.setItemText(5, _translate("MainWindow", "N6"))
        self.dropDown_nulls.setItemText(6, _translate("MainWindow", "N7"))
        self.dropDown_nulls.setItemText(7, _translate("MainWindow", "N8"))
        self.dropDown_nulls.setItemText(8, _translate("MainWindow", "N9"))
        self.dropDown_nulls.setItemText(9, _translate("MainWindow", "N10"))
        self.dropDown_nulls.setItemText(10, _translate("MainWindow", "N11"))
        self.dropDown_nulls.setItemText(11, _translate("MainWindow", "N12"))
        self.pushButton_pistonScan.setText(_translate("MainWindow", "Piston Scan"))
        self.label_nullRange.setText(_translate("MainWindow", "Scan Range:"))
        self.label_sinusoid.setText(_translate("MainWindow", "Sinusoidal Function"))
        self.text_nullRange.setText(_translate("MainWindow", "min:step:max"))
        self.radioButton_seg1.setText(_translate("MainWindow", "Segment 1"))
        self.radioButton_seg2.setText(_translate("MainWindow", "Segment 2"))
        self.label_fluxVtime.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Total Flux vs Time</span></p></body></html>"))
        self.label_spectralFlux.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Spectral Flux</span></p></body></html>"))
        self.dropDown_spectralFlux.setItemText(0, _translate("MainWindow", "P4"))
        self.dropDown_spectralFlux.setItemText(1, _translate("MainWindow", "N3"))
        self.dropDown_spectralFlux.setItemText(2, _translate("MainWindow", "P3"))
        self.dropDown_spectralFlux.setItemText(3, _translate("MainWindow", "N2"))
        self.dropDown_spectralFlux.setItemText(4, _translate("MainWindow", "AN4"))
        self.dropDown_spectralFlux.setItemText(5, _translate("MainWindow", "N5"))
        self.dropDown_spectralFlux.setItemText(6, _translate("MainWindow", "N4"))
        self.dropDown_spectralFlux.setItemText(7, _translate("MainWindow", "AN5"))
        self.dropDown_spectralFlux.setItemText(8, _translate("MainWindow", "N6"))
        self.dropDown_spectralFlux.setItemText(9, _translate("MainWindow", "AN1"))
        self.dropDown_spectralFlux.setItemText(10, _translate("MainWindow", "AN6"))
        self.dropDown_spectralFlux.setItemText(11, _translate("MainWindow", "N1"))
        self.dropDown_spectralFlux.setItemText(12, _translate("MainWindow", "AN2"))
        self.dropDown_spectralFlux.setItemText(13, _translate("MainWindow", "P2"))
        self.dropDown_spectralFlux.setItemText(14, _translate("MainWindow", "AN3"))
        self.dropDown_spectralFlux.setItemText(15, _translate("MainWindow", "P1"))
        self.label_systemOverview.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">System Overview</span></p></body></html>"))

    def checked(self):
        print("Checkbox status changed")

    def save(self):
        # Need to see what checkboxes are ticked and then save a text file with a list of those names to the path
        # specified and with the filename specified.

        checkboxes = [self.checkBox_frame, self.checkBox_selectChannel, self.checkBox_fluxVec,
                      self.checkBox_selectFluxVec, self.checkBox_mountPos, self.checkBox_memsPos]
        nsave = len(checkboxes)
        ticked = []

        for i in range(nsave):
            box = checkboxes[i]
            if box.isChecked():
                name = box.text()
                ticked.append(name)

        path = self.text_path.text()
        filename = self.text_filename.text()

        file_path = f"{path}/{filename}.txt"

        if os.path.exists(file_path):
            print(f'Overwriting the file {file_path}.')

        f = open(file_path, "w")
        f.writelines('\n'.join(ticked))
        f.close()

    def resetTable(self, table):
        print(table.columnCount())


    def toggleList(self):
        # Toggle the visibility of the list widget
        self.listWidget.setVisible(not self.listWidget.isVisible())

        self.listWidget.raise_()

    def get_checked_states(self):
        # Get the checked state of each item in the QListWidget
        checked_states = []

        for i in range(self.listWidget.count()):
            item = self.listWidget.item(i)
            if item.checkState() == Qt.Checked:
                checked_states.append(int(item.text()))

        return checked_states
    
    def enableCellEditing(self, state, table):
        if state == 2:  # 2 corresponds to checked state
            self.table.setEditTriggers(QtWidgets.QTableWidget.AllEditTriggers)
        else:
            self.table.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

    def setTableEditable(self, table, editable):
        if editable:
            table.setEditTriggers(QtWidgets.QTableWidget.AllEditTriggers)
        else:
            table.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

    def toggleEditable(self, state, table):

        if state == 2:  # 2 corresponds to checked state
            self.setTableEditable(table, True)
            # table.setEditTriggers(QtWidgets.QTableWidget.AllEditTriggers)
        else:
            self.setTableEditable(table, False)
            # table.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

    # def eventFilter(self, source, event):
    #     # Hide the list widget if a click occurs outside it
    #     if source == self and event.type() == event.MouseButtonPress:
    #         if not self.listWidget.geometry().contains(event.globalPos()):
    #             self.listWidget.hide()
    #     return super().eventFilter(source, event)
    
    def gettext(self):
        print(self.text_mountStepSize_urad.text())

    def pist_up(self):

        checked_items = self.get_checked_states()
        row = [r - 1 for r in checked_items]
        col = 0
        action = "up"
        stepsize = self.text_pistStepSize
        table = self.tab_memsPosition
        manualCheckBox = self.checkBox_manualMEMs
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def pist_down(self):

        checked_items = self.get_checked_states()
        row = [r - 1 for r in checked_items]
        col = 0
        action = "down"
        stepsize = self.text_pistStepSize
        table = self.tab_memsPosition
        manualCheckBox = self.checkBox_manualMEMs
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def tip_up(self):

        checked_items = self.get_checked_states()
        row = [r - 1 for r in checked_items]
        col = 1
        action = "up"
        stepsize = self.text_ttStepSize
        table = self.tab_memsPosition
        manualCheckBox = self.checkBox_manualMEMs
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def tip_down(self):

        checked_items = self.get_checked_states()
        row = [r - 1 for r in checked_items]
        col = 1
        action = "down"
        stepsize = self.text_ttStepSize
        table = self.tab_memsPosition
        manualCheckBox = self.checkBox_manualMEMs
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def tilt_up(self):

        checked_items = self.get_checked_states()
        row = [r - 1 for r in checked_items]
        col = 2
        action = "up"
        stepsize = self.text_ttStepSize
        table = self.tab_memsPosition
        manualCheckBox = self.checkBox_manualMEMs
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def tilt_down(self):

        checked_items = self.get_checked_states()
        row = [r - 1 for r in checked_items]
        col = 2
        action = "down"
        stepsize = self.text_ttStepSize
        table = self.tab_memsPosition
        manualCheckBox = self.checkBox_manualMEMs
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)


    def x_up(self):
        row = [0]
        col = 0
        action = "up"
        stepsize = self.text_mountStepSize_um
        table = self.table_mountPos_xyz
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def x_down(self):
        row = [0]
        col = 0
        action = "down"
        stepsize = self.text_mountStepSize_um
        table = self.table_mountPos_xyz
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def y_up(self):
        row = [0]
        col = 1
        action = "up"
        stepsize = self.text_mountStepSize_um
        table = self.table_mountPos_xyz
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def y_down(self):
        row = [0]
        col = 1
        action = "down"
        stepsize = self.text_mountStepSize_um
        table = self.table_mountPos_xyz
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def z_up(self):
        row = [0]
        col = 2
        action = "up"
        stepsize = self.text_mountStepSize_um
        table = self.table_mountPos_xyz
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def z_down(self):
        row = [0]
        col = 2
        action = "down"
        stepsize = self.text_mountStepSize_um
        table = self.table_mountPos_xyz
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def roll_up(self):
        row = [0]
        col = 0
        action = "up"
        stepsize = self.text_mountStepSize_urad
        table = self.table_mountPos_rpy
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def roll_down(self):
        # if self.checkBox_manualMount.isChecked():
        row = [0]
        col = 0
        action = "down"
        stepsize = self.text_mountStepSize_urad
        table = self.table_mountPos_rpy
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def pitch_up(self):
        # if self.checkBox_manualMount.isChecked():
        row = [0]
        col = 1
        action = "up"
        stepsize = self.text_mountStepSize_urad
        table = self.table_mountPos_rpy
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def pitch_down(self):
        # if self.checkBox_manualMount.isChecked():
        row = [0]
        col = 1
        action = "down"
        stepsize = self.text_mountStepSize_urad
        table = self.table_mountPos_rpy
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def yaw_up(self):
        # if self.checkBox_manualMount.isChecked():
        row = [0]
        col = 2
        action = "up"
        stepsize = self.text_mountStepSize_urad
        table = self.table_mountPos_rpy
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def yaw_down(self):

        row = [0]
        col = 2
        action = "down"
        stepsize = self.text_mountStepSize_urad
        table = self.table_mountPos_rpy
        manualCheckBox = self.checkBox_manualMount
        self.update_cell(action, stepsize, table, row, col, manualCheckBox)

    def update_cell(self, action, stepsize, table, row, col, manualCheckBox):

        step = stepsize.text()

        if step is not None and manualCheckBox.isChecked():
            try:
                step_value = float(step)

                for r in row:
                    # Check if the cell value to be changed is even a float
                    try:
                        item = table.item(r, col)

                        if item is None:  # If nothing is in the cell
                            emptycell_value = 0.000
                            item = QtWidgets.QTableWidgetItem(f"{emptycell_value}")

                        cell_value = float(item.text())

                        if action == "down":
                            new_cell_value = cell_value - step_value
                        elif action == "up":
                            new_cell_value = cell_value + step_value
                        else:
                            print("Invalid action.")
                            new_cell_value = cell_value

                        new_item = QtWidgets.QTableWidgetItem("{:.3f}".format(new_cell_value))


                        table.setItem(r, col, new_item)

                    except ValueError:
                        print("Cell value is not a float.")
            except ValueError:
                print("Step value is not a float.")
        else:
            print("No step size given.")

    def on_item_changed(self, item):
        try:
            float_value = float(item.text())
            # If the value is a valid float, allow the change
            item.setText("{:.3f}".format(float_value))  # Convert to 3 decimal places if it's a float
        except ValueError:
            # If the entered value is not a float, prevent the change
            item.setText("0.000")

    # def on_item_changed(self, item, manualCheckBox):
    #     if manualCheckBox.isChecked():
    #         try:
    #             float_value = float(item.text())
    #             # If the value is a valid float, allow the change
    #             item.setText("{:.3f}".format(float_value))  # Convert to 3 decimal places if it's a float
    #         except ValueError:
    #             # If the entered value is not a float, prevent the change
    #             item.setText("0.000")

    def on_text_changed(self, text, variable):
        try:
            value = float(text)
        except ValueError:
            variable.setText(None)
            print("Input value is not a float.")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())